//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2012-12-02 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Thu 30-Oct-2008 14:59:38)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Tile implements EvaluatePP {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=shape KEEP=NO
  private volatile Vector shape = null;
// ***** VDMTOOLS END Name=shape

// ***** VDMTOOLS START Name=corners KEEP=NO
  private volatile Vector corners = null;
// ***** VDMTOOLS END Name=corners

// ***** VDMTOOLS START Name=maxX KEEP=NO
  private volatile Integer maxX = null;
// ***** VDMTOOLS END Name=maxX

// ***** VDMTOOLS START Name=maxY KEEP=NO
  private volatile Integer maxY = null;
// ***** VDMTOOLS END Name=maxY

// ***** VDMTOOLS START Name=newMaxX KEEP=NO
  private volatile Integer newMaxX = null;
// ***** VDMTOOLS END Name=newMaxX

// ***** VDMTOOLS START Name=newMaxY KEEP=NO
  private volatile Integer newMaxY = null;
// ***** VDMTOOLS END Name=newMaxY

// ***** VDMTOOLS START Name=shift KEEP=NO
  private volatile Integer shift = null;
// ***** VDMTOOLS END Name=shift

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=TileSentinel KEEP=NO
  class TileSentinel extends Sentinel {

    public final int Tile = 0;

    public final int invert = 1;

    public final int rotate = 2;

    public final int getShape = 3;

    public final int getCorners = 4;

    public final int nr_functions = 5;


    public TileSentinel () throws CGException {}


    public TileSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=TileSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new TileSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=vdm_init_Tile KEEP=NO
  private void vdm_init_Tile () throws CGException {
    try {

      setSentinel();
      shape = new Vector();
      corners = new Vector();
      maxX = new Integer(0);
      maxY = new Integer(0);
      newMaxX = new Integer(0);
      newMaxY = new Integer(0);
      shift = new Integer(0);
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Tile


// ***** VDMTOOLS START Name=Tile KEEP=NO
  public Tile () throws CGException {
    vdm_init_Tile();
  }
// ***** VDMTOOLS END Name=Tile


// ***** VDMTOOLS START Name=Tile#2|Vector|Vector KEEP=NO
  public Tile (final Vector s, final Vector c) throws CGException {

    vdm_init_Tile();
    {

      shape = (Vector) UTIL.ConvertToList(UTIL.clone(s));
      corners = (Vector) UTIL.ConvertToList(UTIL.clone(c));
      {

        HashSet iset_5 = new HashSet();
        HashSet set_13 = new HashSet();
        Enumeration enm_14 = shape.elements();
        while ( enm_14.hasMoreElements())
          set_13.add(enm_14.nextElement());
        iset_5 = set_13;
        Utilities.Pos p = null;
        for (Iterator enm_27 = iset_5.iterator(); enm_27.hasNext(); ) {

          Utilities.Pos elem_6 = (Utilities.Pos) enm_27.next();
          p = elem_6;
          {

            Boolean cond_15 = null;
            Integer var1_16 = null;
            var1_16 = (p).x;
            cond_15 = new Boolean((var1_16.intValue()) > (maxX.intValue()));
            if (cond_15.booleanValue()) {

              Integer rhs_19 = null;
              rhs_19 = (p).x;
              maxX = UTIL.NumberToInt(UTIL.clone(rhs_19));
            }
            Boolean cond_21 = null;
            Integer var1_22 = null;
            var1_22 = (p).y;
            cond_21 = new Boolean((var1_22.intValue()) > (maxY.intValue()));
            if (cond_21.booleanValue()) {

              Integer rhs_25 = null;
              rhs_25 = (p).y;
              maxY = UTIL.NumberToInt(UTIL.clone(rhs_25));
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=Tile#2|Vector|Vector


// ***** VDMTOOLS START Name=rotate KEEP=NO
  public void rotate () throws CGException {

    sentinel.entering(((TileSentinel) sentinel).rotate);
    try {

      Vector newShape = new Vector();
      Vector newCorners = new Vector();
      {

        HashSet iset_1 = new HashSet();
        HashSet set_9 = new HashSet();
        Enumeration enm_10 = shape.elements();
        while ( enm_10.hasMoreElements())
          set_9.add(enm_10.nextElement());
        iset_1 = set_9;
        Utilities.Pos p = null;
        for (Iterator enm_45 = iset_1.iterator(); enm_45.hasNext(); ) {

          Utilities.Pos elem_2 = (Utilities.Pos) enm_45.next();
          p = elem_2;
          {

            Integer newY = null;
            Integer var2_12 = null;
            Integer var1_13 = null;
            var1_13 = (p).x;
            var2_12 = new Integer(var1_13.intValue() - (new Integer(maxX.intValue() - new Integer(2).intValue())).intValue());
            newY = new Integer(new Integer(1).intValue() - var2_12.intValue());
            Utilities.Pos point = null;
            Integer tmpVar_18 = null;
            tmpVar_18 = (p).y;
            point = new Utilities.Pos(tmpVar_18, newY);
            newShape.add(point);
            if (new Boolean((newY.intValue()) < (shift.intValue())).booleanValue()) 
              shift = UTIL.NumberToInt(UTIL.clone(newY));
            Boolean cond_27 = null;
            Integer var1_28 = null;
            var1_28 = (p).y;
            cond_27 = new Boolean((var1_28.intValue()) > (newMaxX.intValue()));
            if (cond_27.booleanValue()) {

              Integer rhs_31 = null;
              rhs_31 = (p).y;
              newMaxX = UTIL.NumberToInt(UTIL.clone(rhs_31));
            }
            if (new Boolean((newY.intValue()) > (newMaxY.intValue())).booleanValue()) 
              newMaxY = UTIL.NumberToInt(UTIL.clone(newY));
            Boolean cond_37 = null;
            HashSet var2_39 = new HashSet();
            HashSet set_41 = new HashSet();
            Enumeration enm_42 = corners.elements();
            while ( enm_42.hasMoreElements())
              set_41.add(enm_42.nextElement());
            var2_39 = set_41;
            cond_37 = new Boolean(var2_39.contains(p));
            if (cond_37.booleanValue()) 
              newCorners.add(point);
          }
        }
      }
      if (new Boolean((shift.intValue()) < (new Integer(0).intValue())).booleanValue()) {

        Vector newShapeAux = new Vector();
        Vector newCornersAux = new Vector();
        {

          HashSet iset_49 = new HashSet();
          HashSet set_57 = new HashSet();
          Enumeration enm_58 = newShape.elements();
          while ( enm_58.hasMoreElements())
            set_57.add(enm_58.nextElement());
          iset_49 = set_57;
          Utilities.Pos p = null;
          for (Iterator enm_85 = iset_49.iterator(); enm_85.hasNext(); ) {

            Utilities.Pos elem_50 = (Utilities.Pos) enm_85.next();
            p = elem_50;
            {

              Integer newY = null;
              Integer var1_59 = null;
              var1_59 = (p).y;
              newY = new Integer(var1_59.intValue() - shift.intValue());
              Utilities.Pos point = null;
              Integer tmpVar_62 = null;
              tmpVar_62 = (p).x;
              point = new Utilities.Pos(tmpVar_62, newY);
              newShapeAux.add(point);
              Boolean cond_67 = null;
              Integer var1_68 = null;
              var1_68 = (p).x;
              cond_67 = new Boolean((var1_68.intValue()) > (newMaxX.intValue()));
              if (cond_67.booleanValue()) {

                Integer rhs_71 = null;
                rhs_71 = (p).x;
                newMaxX = UTIL.NumberToInt(UTIL.clone(rhs_71));
              }
              if (new Boolean((newY.intValue()) > (newMaxY.intValue())).booleanValue()) 
                newMaxY = UTIL.NumberToInt(UTIL.clone(newY));
              Boolean cond_77 = null;
              HashSet var2_79 = new HashSet();
              HashSet set_81 = new HashSet();
              Enumeration enm_82 = newCorners.elements();
              while ( enm_82.hasMoreElements())
                set_81.add(enm_82.nextElement());
              var2_79 = set_81;
              cond_77 = new Boolean(var2_79.contains(p));
              if (cond_77.booleanValue()) 
                newCornersAux.add(point);
            }
          }
        }
        newShape = (Vector) UTIL.ConvertToList(UTIL.clone(newShapeAux));
        newCorners = (Vector) UTIL.ConvertToList(UTIL.clone(newCornersAux));
      }
      maxX = UTIL.NumberToInt(UTIL.clone(newMaxX));
      maxY = UTIL.NumberToInt(UTIL.clone(newMaxY));
      newMaxY = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
      newMaxX = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
      shift = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
      shape = (Vector) UTIL.ConvertToList(UTIL.clone(newShape));
      corners = (Vector) UTIL.ConvertToList(UTIL.clone(newCorners));
    }
    finally {
      sentinel.leaving(((TileSentinel) sentinel).rotate);
    }
  }
// ***** VDMTOOLS END Name=rotate


// ***** VDMTOOLS START Name=invert KEEP=NO
  public void invert () throws CGException {

    sentinel.entering(((TileSentinel) sentinel).invert);
    try {

      Vector newShape = new Vector();
      Vector newCorners = new Vector();
      {

        HashSet iset_1 = new HashSet();
        HashSet set_9 = new HashSet();
        Enumeration enm_10 = shape.elements();
        while ( enm_10.hasMoreElements())
          set_9.add(enm_10.nextElement());
        iset_1 = set_9;
        Utilities.Pos p = null;
        for (Iterator enm_41 = iset_1.iterator(); enm_41.hasNext(); ) {

          Utilities.Pos elem_2 = (Utilities.Pos) enm_41.next();
          p = elem_2;
          {

            Integer newY = null;
            Integer var2_12 = null;
            var2_12 = (p).y;
            newY = new Integer(maxY.intValue() - var2_12.intValue());
            Utilities.Pos point = null;
            Integer tmpVar_14 = null;
            tmpVar_14 = (p).x;
            point = new Utilities.Pos(tmpVar_14, newY);
            newShape.add(point);
            if (new Boolean((newY.intValue()) < (shift.intValue())).booleanValue()) 
              shift = UTIL.NumberToInt(UTIL.clone(newY));
            Boolean cond_23 = null;
            Integer var1_24 = null;
            var1_24 = (p).y;
            cond_23 = new Boolean((var1_24.intValue()) > (newMaxX.intValue()));
            if (cond_23.booleanValue()) {

              Integer rhs_27 = null;
              rhs_27 = (p).y;
              newMaxX = UTIL.NumberToInt(UTIL.clone(rhs_27));
            }
            if (new Boolean((newY.intValue()) > (newMaxY.intValue())).booleanValue()) 
              newMaxY = UTIL.NumberToInt(UTIL.clone(newY));
            Boolean cond_33 = null;
            HashSet var2_35 = new HashSet();
            HashSet set_37 = new HashSet();
            Enumeration enm_38 = corners.elements();
            while ( enm_38.hasMoreElements())
              set_37.add(enm_38.nextElement());
            var2_35 = set_37;
            cond_33 = new Boolean(var2_35.contains(p));
            if (cond_33.booleanValue()) 
              newCorners.add(point);
          }
        }
      }
      maxX = UTIL.NumberToInt(UTIL.clone(newMaxX));
      maxY = UTIL.NumberToInt(UTIL.clone(newMaxY));
      newMaxY = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
      newMaxX = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
      shift = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
      shape = (Vector) UTIL.ConvertToList(UTIL.clone(newShape));
      corners = (Vector) UTIL.ConvertToList(UTIL.clone(newCorners));
    }
    finally {
      sentinel.leaving(((TileSentinel) sentinel).invert);
    }
  }
// ***** VDMTOOLS END Name=invert


// ***** VDMTOOLS START Name=getShape KEEP=NO
  public Vector getShape () throws CGException {

    sentinel.entering(((TileSentinel) sentinel).getShape);
    try {

      Vector rexpr_1 = null;
      rexpr_1 = this.shape;
      return rexpr_1;
    }
    finally {
      sentinel.leaving(((TileSentinel) sentinel).getShape);
    }
  }
// ***** VDMTOOLS END Name=getShape


// ***** VDMTOOLS START Name=getCorners KEEP=NO
  public Vector getCorners () throws CGException {

    sentinel.entering(((TileSentinel) sentinel).getCorners);
    try {

      Vector rexpr_1 = null;
      rexpr_1 = this.corners;
      return rexpr_1;
    }
    finally {
      sentinel.leaving(((TileSentinel) sentinel).getCorners);
    }
  }
// ***** VDMTOOLS END Name=getCorners

}
;
